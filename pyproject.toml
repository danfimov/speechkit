[project]
name = "speechkit"
version = "0.1.0"
description = "Interface for speech-to-text model"
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    # faster asyncio loop
    "uvloop>=0.21.0",
    # api
    "uvicorn>=0.34.0",
    "fastapi>=0.115.12",
    "python-multipart>=0.0.20",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.1",
    # postgres
    "sqlalchemy>=2.0.39",
    "alembic>=1.13.1",
    "asyncpg>=0.30.0",
    "greenlet>=3.1.1",
    "psycopg2-binary>=2.9.10",
    # audio processing
    "librosa>=0.11.0",
    "numpy>=1.26.4,<2",
    "soundfile>=0.13.1",
    # for any inferenc
    "transformers==4.48.3",
    # load models from s3
    "aiohttp==3.11.12",
    "aiohttp-s3-client>=1.0.0",
    "anyio>=4.9.0",
    # pytocrh inference
    "torch>=2.5.1",
    "accelerate>=1.5.2",
    # onnx inference
    "onnxruntime>=1.21.0",
    "onnx>=1.17.0",
    "optimum>=1.24.0",
    # task queue
    "taskiq==0.11.17",
    "taskiq-aio-pika==0.4.1",
    "taskiq-fastapi==0.3.4",
    "taskiq-pipelines==0.1.4",
    "taskiq-asyncpg==0.3.2",
    # observability
    "prometheus-client>=0.21.1",
    "prometheus-async>=25.1.0",
    "starlette-exporter>=0.23.0",
    "sentry-sdk[fastapi]>=2.24.1",
    "asgi-correlation-id>=4.3.4",
]

[dependency-groups]
dev = [
    # pytest
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.26.0",
    # linting and formatting
    "ruff>=0.11.9",
    # load testing
    "click>=8.1.8",
    "httpx>=0.28.1",
    "rich>=13.9.4",
    # types
    "mypy>=1.15.0",
    "types-psutil>=7.0.0.20250218",
    # mocks
    "polyfactory>=2.20.0",
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true


[tool.uv.sources]
torch = { index = "pytorch-cpu" }

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"
default = true

[tool.ruff]
line-length = 120
exclude = [
    ".ruff_cache",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    # Commented code
    "ERA001",

    # docstring
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D107",

    # strange rule about boolean default argument
    "FBT001",
    "FBT002",

    # todo elements
    "TD002",
    "TD003",
    "FIX002",

    # Conflicted rules
    "D203",  # with D211
    "D212",  # with D213
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-quotes]
multiline-quotes = "double"
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLR2004",  # ignore magic value used in comparison in tests
    "S101",  # ignore asserts in tests
    "D",  # ignore docstrings in tests
    "S106",  # hard-coded password in tests

    # type annotations
    "ANN001",
    "ANN002",
    "ANN201",
    "ANN202",
    "ANN003",

    # unused function argument
    "ARG001",
    "ARG002",

    "SLF001",  # private member accessed
]
"tests/test_linting.py" = ["S603"]  # ignore subprocess usage in linting tests
"speechkit/dependencies.py" = ["PLW0603", "ANN201"]
"speechkit/infrastructure/database/migrations/versions/*" = ["N999"]

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"
platform = "linux"
follow_imports = "normal"
ignore_missing_imports = false
mypy_path = "stubs"
disallow_untyped_defs = true
disallow_untyped_calls = true
warn_return_any = true
warn_unreachable = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
modules = ["speechkit"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_untyped_fields = true
warn_required_dynamic_aliases = false

[tool.pytest.ini_options]
pythonpath = [
  "."
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks unit tests",
    "integration: marks tests with real infrastructure env",
    "linting: marks tests as linter/static analyzers",
]

[tool.pytest]
python_files = "test_*.py"
python_classes = ["*Test", "Test*"]
python_functions = "test_*"
testpaths = "tests/"


[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "def __repr__",
    "def __str__",
    "def __unicode__",
]
show_missing = true
skip_empty = true
omit = [
    "*/__init__.py",
    "venv/*",
    "tests/*"
]
